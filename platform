import React, { useState, useCallback, useEffect, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Upload, FileText, Search, Tag, AlertCircle, ChevronRight, Moon, Sun, FileQuestion, GitCompare, Download } from 'lucide-react'
import { useToast } from "@/components/ui/use-toast"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Switch } from "@/components/ui/switch"
import ReactWordcloud from 'react-wordcloud'
import axios from 'axios'

const API_BASE_URL = 'https://api.afforai.com/v1'  // Replace with your actual API base URL

const LoadingComponent = ({ progress }: { progress: number }) => (
  <motion.div
    initial={{ opacity: 0, height: 0 }}
    animate={{ opacity: 1, height: 'auto' }}
    exit={{ opacity: 0, height: 0 }}
    transition={{ duration: 0.3 }}
    className="mt-4"
  >
    <div className="relative pt-1">
      <div className="flex mb-2 items-center justify-between">
        <div>
          <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200 dark:text-blue-200 dark:bg-blue-600">
            {progress}%
          </span>
        </div>
      </div>
      <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200 dark:bg-blue-700">
        <motion.div 
          style={{ width: `${progress}%` }}
          className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-gradient-to-r from-blue-500 to-sky-400 dark:from-blue-400 dark:to-sky-300"
          initial={{ width: 0 }}
          animate={{ width: `${progress}%` }}
          transition={{ duration: 0.5 }}
        />
      </div>
    </div>
  </motion.div>
);

export default function AfforaiPlatform() {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const { toast } = useToast();

  // File upload state
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  // Analysis state
  const [analysis, setAnalysis] = useState("");
  const [entities, setEntities] = useState<{ text: string; value: number }[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisProgress, setAnalysisProgress] = useState(0);

  // Search state
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState<{ id: number; title: string; snippet: string }[]>([]);
  const [isSearching, setIsSearching] = useState(false);

  // Summarization state
  const [summaries, setSummaries] = useState<Record<string, string>>({});
  const [isSummarizing, setIsSummarizing] = useState(false);
  const [summaryProgress, setSummaryProgress] = useState(0);

  // Comparison state
  const [comparisonResult, setComparisonResult] = useState<string>("");
  const [isComparing, setIsComparing] = useState(false);
  const [comparisonProgress, setComparisonProgress] = useState(0);

  // Export state
  const [isExporting, setIsExporting] = useState(false);

  const handleFileUpload = useCallback(async (files: FileList | null) => {
    if (files) {
      setIsUploading(true);
      const formData = new FormData();
      Array.from(files).forEach((file) => {
        formData.append('files', file);
      });

      try {
        const response = await axios.post(`${API_BASE_URL}/upload`, formData, {
          onUploadProgress: (progressEvent) => {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total ?? 1));
            setUploadProgress(percentCompleted);
          },
        });

        setUploadedFiles(prev => [...prev, ...Array.from(files)]);
        toast({
          title: "Files uploaded successfully",
          description: `${files.length} file(s) have been uploaded and are ready for processing.`,
        });
      } catch (error) {
        toast({
          title: "Upload failed",
          description: "There was an error uploading your files. Please try again.",
          variant: "destructive",
        });
      } finally {
        setIsUploading(false);
        setUploadProgress(0);
      }
    }
  }, [toast]);

  const handleAnalyze = useCallback(async () => {
    setIsAnalyzing(true);
    try {
      const response = await axios.post(`${API_BASE_URL}/analyze`, { files: uploadedFiles.map(f => f.name) });
      setAnalysis(response.data.analysis);
      setEntities(response.data.entities);
      toast({
        title: "Analysis complete",
        description: "Documents have been successfully analyzed.",
      });
    } catch (error) {
      toast({
        title: "Analysis failed",
        description: "There was an error analyzing the documents. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
      setAnalysisProgress(0);
    }
  }, [uploadedFiles, toast]);

  const handleSearch = useCallback(async () => {
    if (!searchQuery.trim()) return;

    setIsSearching(true);
    try {
      const response = await axios.get(`${API_BASE_URL}/search`, { params: { query: searchQuery } });
      setSearchResults(response.data.results);
    } catch (error) {
      toast({
        title: "Search failed",
        description: "There was an error performing the search. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSearching(false);
    }
  }, [searchQuery, toast]);

  const handleSummarize = useCallback(async (files: File[]) => {
    setIsSummarizing(true);
    try {
      const response = await axios.post(`${API_BASE_URL}/summarize`, { files: files.map(f => f.name) });
      setSummaries(response.data.summaries);
      toast({
        title: "Summarization complete",
        description: `${files.length} document(s) have been summarized.`,
      });
    } catch (error) {
      toast({
        title: "Summarization failed",
        description: "There was an error summarizing the documents. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSummarizing(false);
      setSummaryProgress(0);
    }
  }, [toast]);

  const handleCompare = useCallback(async (files: File[]) => {
    if (files.length < 2) {
      toast({
        title: "Comparison failed",
        description: "Please select at least two documents to compare.",
        variant: "destructive",
      });
      return;
    }

    setIsComparing(true);
    try {
      const response = await axios.post(`${API_BASE_URL}/compare`, { files: files.map(f => f.name) });
      setComparisonResult(response.data.comparison);
      toast({
        title: "Comparison complete",
        description: `${files.length} documents have been compared.`,
      });
    } catch (error) {
      toast({
        title: "Comparison failed",
        description: "There was an error comparing the documents. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsComparing(false);
      setComparisonProgress(0);
    }
  }, [toast]);

  const handleExport = useCallback(async (data: string, fileName: string) => {
    setIsExporting(true);
    try {
      const blob = new Blob([data], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      toast({
        title: "Export successful",
        description: `${fileName} has been exported.`,
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting the file. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  }, [toast]);

  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDarkMode]);

  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    handleFileUpload(e.dataTransfer.files);
  }, [handleFileUpload]);

  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  }, []);

  const wordcloudOptions = useMemo(() => ({
    colors: ['#2196F3', '#64B5F6', '#90CAF9', '#BBDEFB', '#E3F2FD'],
    fontSizes: [12, 60],
    rotations: 3,
    rotationAngles: [-90, 0],
  }), []);

  return (
    <div className={`container mx-auto p-4 bg-gradient-to-br from-blue-100 to-sky-100 dark:from-gray-900 dark:to-blue-900 min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark' : ''}`}>
      <div className="flex justify-between items-center mb-8">
        <motion.h1 
          className="text-4xl font-bold text-blue-800 dark:text-blue-200"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          Afforai AI Platform
        </motion.h1>
        <div className="flex items-center space-x-2">
          <Sun className="h-4 w-4 text-blue-800 dark:text-blue-200" aria-hidden="true" />
          <Switch
            checked={isDarkMode}
            onCheckedChange={setIsDarkMode}
            aria-label="Toggle dark mode"
          />
          <Moon className="h-4 w-4 text-blue-800 dark:text-blue-200" aria-hidden="true" />
        </div>
      </div>
      
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <Card className="mb-8 overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 dark:bg-gray-800">
          <CardHeader className="bg-gradient-to-r from-blue-500 to-sky-400 dark:from-blue-700 dark:to-sky-600 text-white">
            <CardTitle>Multi-Document Upload</CardTitle>
            <CardDescription className="text-blue-100">Upload multiple documents for AI processing</CardDescription>
          </CardHeader>
          <CardContent className="p-6">
            <div 
              className="border-2 border-dashed border-blue-300 dark:border-blue-700 rounded-lg p-4 text-center cursor-pointer hover:bg-blue-50 dark:hover:bg-blue-900 transition-colors duration-300"
              onDrop={handleDrop}
              onDragOver={handleDragOver}
              onClick={() => document.getElementById('fileInput')?.click()}
              onKeyDown={(e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                  e.preventDefault();
                  document.getElementById('fileInput')?.click();
                }
              }}
              tabIndex={0}
              role="button"
              aria-label="Upload files by clicking or dragging and dropping"
            >
              <Upload className="mx-auto h-12 w-12 text-blue-500 dark:text-blue-400 mb-4" aria-hidden="true" />
              <p className="text-blue-700 dark:text-blue-300">Drag and drop files here, or click to select files</p>
              <Input 
                id="fileInput"
                type="file" 
                onChange={(e) => handleFileUpload(e.target.files)}
                accept=".pdf,.doc,.docx,.txt"
                multiple
                className="hidden"
                disabled={isUploading}
                aria-label="Upload files"
              />
            </div>
            {isUploading && <LoadingComponent progress={uploadProgress} />}
          </CardContent>
          <CardFooter>
            <ScrollArea className="h-20 w-full">
              <AnimatePresence>
                {uploadedFiles.map((file, index) => (
                  <motion.div
                    key={file.name}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                  >
                    <Badge variant="secondary" className="m-1">{file.name}</Badge>
                  </motion.div>
                ))}
              </AnimatePresence>
            </ScrollArea>
          </CardFooter>
        </Card>
      </motion.div>

      <Tabs defaultValue="analysis" className="mb-8">
        <TabsList className="grid w-full grid-cols-5 rounded-full bg-blue-100 dark:bg-blue-900 p-1" aria-label="Document analysis options">
          <TabsTrigger value="analysis" className="rounded-full data-[state=active]:bg-white data-[state=active]:text-blue-800 dark:data-[state=active]:bg-blue-800 dark:data-[state=active]:text-white">Analysis</TabsTrigger>
          <TabsTrigger value="entities" className="rounded-full data-[state=active]:bg-white data-[state=active]:text-blue-800 dark:data-[state=active]:bg-blue-800 dark:data-[state=active]:text-white">Entities</TabsTrigger>
          <TabsTrigger value="search" className="rounded-full data-[state=active]:bg-white data-[state=active]:text-blue-800 dark:data-[state=active]:bg-blue-800 dark:data-[state=active]:text-white">Search</TabsTrigger>
          <TabsTrigger value="summary" className="rounded-full data-[state=active]:bg-white data-[state=active]:text-blue-800 dark:data-[state=active]:bg-blue-800 dark:data-[state=active]:text-white">Summary</TabsTrigger>
          <TabsTrigger value="compare" className="rounded-full data-[state=active]:bg-white data-[state=active]:text-blue-800 dark:data-[state=active]:bg-blue-800 dark:data-[state=active]:text-white">Compare</TabsTrigger>
        </TabsList>
        <AnimatePresence mode="wait">
          <TabsContent value="analysis">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="dark:bg-gray-800">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-sky-400 dark:from-blue-700 dark:to-sky-600 text-white">
                  <CardTitle>Multi-Document Analysis</CardTitle>
                  <CardDescription className="text-blue-100">Analyze and compare multiple documents</CardDescription>
                </CardHeader>
                <CardContent className="p-6">
                  <Button 
                    onClick={handleAnalyze} 
                    className="mb-4 bg-blue-500 hover:bg-blue-600 text-white dark:bg-blue-700 dark:hover:bg-blue-800" 
                    disabled={uploadedFiles.length === 0 || isAnalyzing}
                  >
                    {isAnalyzing ? (
                      <>
                        <FileText className="mr-2 h-4 w-4 animate-spin" aria-hidden="true" />
                        Analyzing...
                      </>
                    ) : (
                      <>
                        <FileText className="mr-2 h-4 w-4" aria-hidden="true" />
                        Analyze Documents
                      </>
                    )}
                  </Button>
                  {isAnalyzing && <LoadingComponent progress={analysisProgress} />}
                  <Textarea 
                    value={analysis} 
                    readOnly 
                    placeholder="Analysis results will appear here..." 
                    className="min-h-[200px] bg-blue-50 border-blue-200 dark:bg-gray-700 dark:border-gray-600 dark:text-white" 
                  />
                  <Button
                    onClick={() => handleExport(analysis, 'analysis_results.txt')}
                    className="mt-4 bg-green-500 hover:bg-green-600 text-white dark:bg-green-700 dark:hover:bg-green-800"
                    disabled={!analysis || isExporting}
                  >
                    <Download className="mr-2 h-4 w-4" aria-hidden="true" />
                    Export Analysis
                  </Button>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>
          <TabsContent value="entities">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="dark:bg-gray-800">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-sky-400 dark:from-blue-700 dark:to-sky-600 text-white">
                  <CardTitle>Named Entity Recognition</CardTitle>
                  <CardDescription className="text-blue-100">Identify and categorize named entities in your documents</CardDescription>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="h-[300px] w-full">
                    <ReactWordcloud 
                      words={entities}
                      options={wordcloudOptions}
                    />
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>
          <TabsContent value="search">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="dark:bg-gray-800">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-sky-400 dark:from-blue-700 dark:to-sky-600 text-white">
                  <CardTitle>Semantic Search</CardTitle>
                  <CardDescription className="text-blue-100">Search across all your documents with advanced AI understanding</CardDescription>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="flex space-x-4 mb-4">
                    <Input 
                      type="text"
                      placeholder="Enter your search query..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="flex-grow bg-blue-50 border-blue-200 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    />
                    <Button onClick={handleSearch} disabled={isSearching} className="bg-blue-500 hover:bg-blue-600 text-white dark:bg-blue-700 dark:hover:bg-blue-800">
                      {isSearching ? (
                        <Search className="mr-2 h-4 w-4 animate-spin" aria-hidden="true" />
                      ) : (
                        <Search className="mr-2 h-4 w-4" aria-hidden="true" />
                      )}
                      Search
                    </Button>
                  </div>
                  <AnimatePresence>
                    {searchResults.map((result, index) => (
                      <motion.div
                        key={result.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                      >
                        <Card className="mb-4 hover:shadow-md transition-shadow duration-300 dark:bg-gray-700">
                          <CardHeader>
                            <CardTitle className="text-blue-700 dark:text-blue-300">{result.title}</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <p className="dark:text-gray-300">{result.snippet}</p>
                          </CardContent>
                          <CardFooter>
                            <Button variant="link" className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">
                              View Document <ChevronRight className="ml-2 h-4 w-4" aria-hidden="true" />
                            </Button>
                          </CardFooter>
                        </Card>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>
          <TabsContent value="summary">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="dark:bg-gray-800">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-sky-400 dark:from-blue-700 dark:to-sky-600 text-white">
                  <CardTitle>Document Summarization</CardTitle>
                  <CardDescription className="text-blue-100">Get concise summaries of your uploaded documents</CardDescription>
                </CardHeader>
                <CardContent className="p-6">
                  <Button 
                    onClick={() => handleSummarize(uploadedFiles)} 
                    className="mb-4 bg-blue-500 hover:bg-blue-600 text-white dark:bg-blue-700 dark:hover:bg-blue-800" 
                    disabled={uploadedFiles.length === 0 || isSummarizing}
                  >
                    {isSummarizing ? (
                      <>
                        <FileQuestion className="mr-2 h-4 w-4 animate-spin" aria-hidden="true" />
                        Summarizing...
                      </>
                    ) : (
                      <>
                        <FileQuestion className="mr-2 h-4 w-4" aria-hidden="true" />
                        Summarize Documents
                      </>
                    )}
                  </Button>
                  {isSummarizing && <LoadingComponent progress={summaryProgress} />}
                  <ScrollArea className="h-[400px] w-full">
                    {Object.entries(summaries).map(([fileName, summary], index) => (
                      <Card key={fileName} className="mb-4 dark:bg-gray-700">
                        <CardHeader>
                          <CardTitle className="text-blue-700 dark:text-blue-300">{fileName}</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="dark:text-gray-300">{summary}</p>
                        </CardContent>
                        <CardFooter>
                          <Button
                            onClick={() => handleExport(summary, `${fileName}_summary.txt`)}
                            className="bg-green-500 hover:bg-green-600 text-white dark:bg-green-700 dark:hover:bg-green-800"
                            disabled={isExporting}
                          >
                            <Download className="mr-2 h-4 w-4" aria-hidden="true" />
                            Export Summary
                          </Button>
                        </CardFooter>
                      </Card>
                    ))}
                  </ScrollArea>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>
          <TabsContent value="compare">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="dark:bg-gray-800">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-sky-400 dark:from-blue-700 dark:to-sky-600 text-white">
                  <CardTitle>Document Comparison</CardTitle>
                  <CardDescription className="text-blue-100">Compare multiple documents to identify similarities and differences</CardDescription>
                </CardHeader>
                <CardContent className="p-6">
                  <Button 
                    onClick={() => handleCompare(uploadedFiles)} 
                    className="mb-4 bg-blue-500 hover:bg-blue-600 text-white dark:bg-blue-700 dark:hover:bg-blue-800" 
                    disabled={uploadedFiles.length < 2 || isComparing}
                  >
                    {isComparing ? (
                      <>
                        <GitCompare className="mr-2 h-4 w-4 animate-spin" aria-hidden="true" />
                        Comparing...
                      </>
                    ) : (
                      <>
                        <GitCompare className="mr-2 h-4 w-4" aria-hidden="true" />
                        Compare Documents
                      </>
                    )}
                  </Button>
                  {isComparing && <LoadingComponent progress={comparisonProgress} />}
                  <Textarea 
                    value={comparisonResult} 
                    readOnly 
                    placeholder="Comparison results will appear here..." 
                    className="min-h-[200px] bg-blue-50 border-blue-200 dark:bg-gray-700 dark:border-gray-600 dark:text-white" 
                  />
                  <Button
                    onClick={() => handleExport(comparisonResult, 'comparison_results.txt')}
                    className="mt-4 bg-green-500 hover:bg-green-600 text-white dark:bg-green-700 dark:hover:bg-green-800"
                    disabled={!comparisonResult || isExporting}
                  >
                    <Download className="mr-2 h-4 w-4" aria-hidden="true" />
                    Export Comparison
                  </Button>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>
        </AnimatePresence>
      </Tabs>

      {uploadedFiles.length === 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20}}
          animate={{opacity: 1, y: 0}}
          transition={{duration: 0.5}}
        >
          <Alert className="bg-blue-100 border-blue-300 text-blue-800 dark:bg-blue-900 dark:border-blue-700 dark:text-blue-200">
            <AlertCircle className="h-4 w-4" aria-hidden="true" />
            <AlertTitle>No files uploaded</AlertTitle>
            <AlertDescription>
              Please upload some documents to start analyzing and searching.
            </AlertDescription>
          </Alert>
        </motion.div>
      )}
    </div>
  )
}
